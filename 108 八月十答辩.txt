刚接触react的时候是把第一周前两天做的微信的项目改成react这种样式
当我们在做某个项目的时候数据可能会很多，再用之前的方法代码量会非常大（主要是重复的代码）这时候就用到了react组件化这个特点，这样做不会产生冗余代码。

最初数据和业务逻辑是放在同一个文件里面的，随着数据的增多，文件中的代码又会非常多，不易于管理。为了管理数据的方便，我们又学了redux，把所有数据存放在store里面，reducer只负责处理逻辑结构，而其他的那些负责view层的显示。

紧接着又会有一些问题出现，这些数据都是死的。我们无法获取动态数据，接下来又学习了axios
axios 有一个type属性有两个值post和get。还有一个URL，接受后台发的链接，请求数据。还有一个接受数据的字段data，还有一个设置类型的header，一般情况都是表单。

这样又会出现问题，当需要多个数据的时候，就需要很多axios，是这个文件里代码又会非常冗余，又学习了中间件

几乎所有的APP或网站都不是只有一个页面，需要多页面跳转，以前用的a标签href属性就可以，react里面讲到了路由router 它有一个history属性常用的有两个browserHistory与hashHistory，他们两个区别是hashHistory浏览器地址栏会有一个#号 route有path属性component  IndexRoute
使用link跳转。

当页面加载数据的时候，处理数据又是很麻烦的问题，又学了数据扁平化，和数据库很相似，将数据分成两部分一部分是entities另一部分存放主键是一个数组。
还有这周学的编写组件。


组件的生命周期：挂载  更新  移除  componentWillMount在组件挂载之前调用                                                   componentDidMount在组件挂载之后调用
                                    shouldComponentUpdate组件是否更新Dom的时候调用

疑问：数据扁平化先拆，拆了之后进行的操作并不多，有些项目甚至几乎用不到。又进行合并，再进行数据处理。我觉得并不适合所有项目。