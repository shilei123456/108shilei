         redux
随着应用的不断扩展，数据不断增加，导致处理数据比较麻烦，react兄弟组件之间不能通信，产生了redux。

redux适用场景用户的使用方式复杂，多个用户之间可以协作，view要从多个来源获取数据
如果只是简单的数据交互就没必要适用，并不是非用不可

redux可以分三部分 store，action，reduce

store主要用于存储数据，可以把它看成一个容器，整个应用只能有一个store。用createStore()这个函数来生成一个store。

action  state的变化会导致View的变化。然而用户接触不到state，只能接触到View。action就是View发出的通知，表示state要发生变化了。
dispatch是View发出Action的唯一方法，接受一个Action对象作为参数，将它发送出去。
action对象是行为的描述会有一个字符串类型的type字段来表示将要执行的动作（必须要有）
需要传递给应用的其他数据信息，数据形式可以自定义
最终返回一个对象。

reducer  当store收到Action以后，必须给出一个新的state，这样View才会发生变化。reducer是一个函数，他接受Action和当前State作为参数，返回一个新的state。
对于一个大型应用，state必然会非常大（因为整个应用只用一个state存储在store里面）导致reducer函数十分庞大。这个时候就可以拆分reducer通过combineReducers合并

connect用于从UI组件生成容器组件，就是将这两种组件连接起来
connect接受两个参数mapStateToProps和mapDispatchToProps

迷惑的地方：store在App.js里面但是我们的数据还是在reducer里面，store里面没看到数据。